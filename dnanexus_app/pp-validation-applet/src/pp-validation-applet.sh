#!/bin/bash
# pp-validation-applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of original_vcf_file: '$original_vcf_file'"
    echo "Value of rephased_vcf: '$rephased_vcf'"
    echo "Value of var_vcf: '$var_vcf'"
    echo "Value of output_prefix: '$output_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    original_vcf_filename="$(dx describe "$original_vcf_file" --name)"
    dx download "$original_vcf_file" -o "${original_vcf_filename}"

    rephased_vcf_filename="$(dx describe "$rephased_vcf" --name)"
    dx download "$rephased_vcf" -o "${rephased_vcf_filename}"
    if [ -n "$var_vcf" ]
    then
        var_vcf_filename="$(dx describe "$var_vcf" --name)"
        dx download "$var_vcf" -o var_vcf
    else
        var_vcf_filename="${original_vcf_filename}"
    fi

    if [ -z "${output_prefix}" ]
    then
        output_prefix="${original_vcf_filename}"_
    fi

    # Hacky way to auto extract the region (first encountered in file)
    region=$(bcftools view -H -G "${original_vcf_filename}" | head -n1 | cut -f1)

    echo "Running validation on file ${rephased_vcf_filename} against reference file ${original_vcf_filename} for region ${region}"
    switch_static --validation "${original_vcf_filename}" \
    --estimation "${rephased_vcf_filename}" --frequency "${var_vcf_filenames}" \
    --region "${region}" --output "${output_prefix}"

    #Â List the generated files
    file_array=($(ls "${output_prefix}"*))
    # Upload the generated files
    for i in "${!file_array[@]}"; do
        output_files[$i]=$(dx upload "${file_array[$i]}" --brief)
    done

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    for i in "${!output_files[@]}"; do
        dx-jobutil-add-output output_files "${output_files[$i]}" --class=array:file
    done
}
