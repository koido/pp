#!/bin/bash
# pp-extract-applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of vcf_bcf_file: '$vcf_bcf_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    FILENAME="$(dx describe "$vcf_bcf_file" --name)"
    echo "Filename : ${FILENAME}"

    dx download "$vcf_bcf_file" -o "${FILENAME}"

    SAMPLES_FILENAME="${FILENAME}.samples.txt"
    VARS_FILENAME="${FILENAME}_vars.bcf"
    HETS_FILENAME="${FILENAME}_hets.bin"

    # Extract sample list
    bcftools query --list-samples vcf_bcf_file > "${SAMPLES_FILENAME}" &
    # Extract variants (can take a long time)
    bcftools view -G -Ob "${FILENAME}" -o "${VARS_FILENAME}" &
    # Extract the low PPs
    pp_extract -f "${FILENAME}" -o "${HETS_FILENAME}" &
    # Wait for the subprocesses to finish
    wait

    samples_file=$(dx upload "${SAMPLES_FILENAME}" --brief)
    vars_file=$(dx upload "${VARS_FILENAME}" --brief)
    hets_file=$(dx upload "${HETS_FILENAME}" --brief)

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output "${SAMPLES_FILENAME}" "${samples_file}" --class=file
    dx-jobutil-add-output "${VARS_FILENAME}" "${vars_file}" --class=file
    dx-jobutil-add-output "${HETS_FILENAME}" "${hets_file}" --class=file
}
