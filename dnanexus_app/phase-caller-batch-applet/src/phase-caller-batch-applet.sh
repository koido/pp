#!/bin/bash
# phase-caller-batch-applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of binary_files: '${binary_files[@]}'"
    echo "Value of vcf_file_without_samples: '$vcf_file_without_samples'"
    echo "Value of sample_list: '$sample_list'"
    echo "Value of suffix: '$suffix'"
    echo "Value of destination: '$destination'"
    echo "Value of cram_path: '$cram_path'"
    echo "Value of verbose: '$verbose'"
    echo "Value of threads: '$threads'"

    #Â dxfuse
    # Create a manifest file for dxfuse
    echo "{
    \"files\" : [],
    \"directories\" : [
        {
        \"proj_id\" : \"$DX_PROJECT_CONTEXT_ID\",
        \"folder\" : \"/\",
        \"dirname\" : \"/project\"
        }
    ]
    }" > .dxfuse_manifest.json
    echo "DX_PROJECT_CONTEXT_ID : ${DX_PROJECT_CONTEXT_ID}"

    # Create a mount point for the project
    MOUNTDIR=/mnt
    sudo mkdir -p $MOUNTDIR

    # Mount the current project
    dxfuse $MOUNTDIR .dxfuse_manifest.json &

    # Wait for mount to start
    sleep 2

    # THIS DOES NOT WORK BECAUSE APPLETS ARE RUN IN CONTAINERS
    # So files will not have a path except "/"

    dx_id_to_path () {
        FFNAME=$(dx describe --json "$1" | jq -r '.name')
        FFPATH=$(dx describe --json "$1" | jq -r '.folder')
        echo "/mnt/project/${FFPATH}/${FFNAME}"
    }

    dx_id_to_dx_path () {
        echo $(dx describe --json "$1" | jq -r '.folder')
    }

    DOCKER_IMAGE=docker/pp_rephase_v1.3.tar.gz
    THREADS_ARG="-t ${threads}"

    if [ "$verbose" = true ]
    then
        VERBOSE="-v"
    else
        unset VERBOSE
    fi

    VCF_FILENAME=$(dx_id_to_path "${vcf_file_without_samples}")
    CHROMOSOME=$(basename $(dx describe --json "${vcf_file_without_samples}" | jq -r '.folder'))
    echo "FILENAME        = ${VCF_FILENAME}"
    echo "CHROMOSOME      = ${CHROMOSOME}"
    SAMPLE_FILENAME=$(dx_id_to_path "${sample_list}")
    echo "SAMPLE FILENAME = ${SAMPLE_FILENAME}"

    tag="phase_caller_v1.3"
    echo "dx run with tag : ${tag}"

    CRAM_PATH_ARG=""
    if ! [ -z "${cram_path}" ]
    then
        CRAM_PATH_ARG="--cram-path \"/mnt/project/${CRAM_PATH}\""
    fi
    SAMPLE_FILENAME_ARG=""
    if ! [ -z "${SAMPLE_FILENAME}" ]
    then
        SAMPLE_FILENAME_ARG="-S \"${SAMPLE_FILENAME}\""
    fi
    SAMPLE_LIST_FILENAME_ARG=""
    if ! [ -z "${SAMPLE_LIST_FILENAME}" ]
    then
        SAMPLE_LIST_FILENAME_ARG="-l \"${SAMPLE_LIST_FILENAME}\""
    fi

    echo "Output file destination : ${destination}/phase_called/${CHROMOSOME}"
    echo "Instance type : ${INSTANCE}"

    echo "This will launch multiple jobs !"

    # Hacky way to get project ID number ...
    PROJECT_ID="$(ls "/mnt/project/${cram_path}/20/" 2> /dev/null | grep ".cram" 2> /dev/null | head -n1 | sed -n 's/[0-9]*_\([0-9]*\)_.*$/\1/p' 2> /dev/null)"

    for i in ${!binary_files[@]}
    do
        bin_file_id=$(dx describe "${binary_files[$i]}" --json | jq -r ".id")
        new_name=$(dx describe "${binary_files[$i]}" --json | jq -r ".name")_${suffix}.bin
        command="dx download ${bin_file_id} -o ${new_name}; time phase_caller -f ${VCF_FILENAME} -b ${new_name} ${SAMPLE_FILENAME_ARG} -I ${PROJECT_ID} ${THREADS_ARG} ${SAMPLE_LIST_FILENAME_ARG} ${VERBOSE} ${CRAM_PATH_ARG}"

        echo run swiss-army-knife -icmd="/usr/src/pp/Docker/update_pp.sh; ${command}" \
            --name RephaseCallerBatchDockerFromApplet \
            -iimage_file="${DOCKER_IMAGE}" --tag "${tag}" \
            --destination "${destination}/phase_called/${CHROMOSOME}" \
            --instance-type ${mem2_ssd1_v2_x4} -y
        #dx download "${binary_files[$i]}" -o binary_files-$i
    done

    dx-jobutil-add-output emptyout "done" --class=string

}
